<?php

namespace backend\models;

use Yii;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "schools".
 *
 * @property int $id
 * @property string $number This should be generated by the system where possible
 * @property string $name
 * @property string|null $description
 * @property int|null $created_by
 * @property int|null $updated_by
 * @property int|null $created_at
 * @property int|null $updated_at
 * @property int $campus
 *
 * @property Campuses $campus0
 * @property AauthUser $createdBy
 * @property Department[] $departments
 * @property ExaminationStructure[] $examinationStructures
 * @property GradingSystem[] $gradingSystems
 * @property AauthUser $updatedBy
 */
class Schools extends \yii\db\ActiveRecord {

    /**
     * {@inheritdoc}
     */
    public static function tableName() {
        return 'schools';
    }

    /**
     * {@inheritdoc}
     */
    public function rules() {
        return [
            [['number', 'name', 'campus'], 'required'],
            [['number', 'name', 'description'], 'string'],
            [['created_by', 'updated_by', 'created_at', 'updated_at', 'campus'], 'default', 'value' => null],
            [['created_by', 'updated_by', 'created_at', 'updated_at', 'campus'], 'integer'],
            ['number', 'unique', 'when' => function ($model) {
                    return $model->isAttributeChanged('number');
                }, 'message' => 'School number already in use!'],
            ['name', 'unique', 'when' => function ($model) {
                    return $model->isAttributeChanged('name');
                }, 'message' => 'School name exist already!'],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => AauthUser::class, 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => AauthUser::class, 'targetAttribute' => ['updated_by' => 'id']],
            [['campus'], 'exist', 'skipOnError' => true, 'targetClass' => Campuses::class, 'targetAttribute' => ['campus' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels() {
        return [
            'id' => 'ID',
            'number' => 'This should be generated by the system where possible',
            'name' => 'Name',
            'description' => 'Description',
            'created_by' => 'Created By',
            'updated_by' => 'Updated By',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'campus' => 'Campus',
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function behaviors() {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                ],
            ],
        ];
    }

    /**
     * Gets query for [[Campus0]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCampus0() {
        return $this->hasOne(Campuses::class, ['id' => 'campus']);
    }

    /**
     * Gets query for [[CreatedBy]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy() {
        return $this->hasOne(AauthUser::class, ['id' => 'created_by']);
    }

    /**
     * Gets query for [[Departments]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getDepartments() {
        return $this->hasMany(Department::class, ['school' => 'id']);
    }

    /**
     * Gets query for [[ExaminationStructures]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getExaminationStructures() {
        return $this->hasMany(ExaminationStructure::class, ['school' => 'id']);
    }

    /**
     * Gets query for [[GradingSystems]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getGradingSystems() {
        return $this->hasMany(GradingSystem::class, ['school' => 'id']);
    }

    /**
     * Gets query for [[UpdatedBy]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUpdatedBy() {
        return $this->hasOne(AauthUser::class, ['id' => 'updated_by']);
    }

    /**
     * Get the school number
     * @return type
     */
    public static function getSchoolNumber() {
        $response = "01";
        $maxValue = self::find()->max('number');
        if (!empty($maxValue)) {
            $response = $maxValue + 1;
        }
        return $response;
    }

}
